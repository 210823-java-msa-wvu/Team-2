<<<<<<< HEAD
{"version":3,"file":"platform-browser.d.ts","sources":["platform-browser.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license Angular v12.2.10\r\n * (c) 2010-2021 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { ComponentRef } from '@angular/core';\r\nimport { DebugElement } from '@angular/core';\r\nimport { DebugNode } from '@angular/core';\r\nimport { ErrorHandler } from '@angular/core';\r\nimport { GetTestability } from '@angular/core';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Injector } from '@angular/core';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { NgProbeToken } from '@angular/core';\r\nimport { NgZone } from '@angular/core';\r\nimport { OnDestroy } from '@angular/core';\r\nimport { PlatformRef } from '@angular/core';\r\nimport { Predicate } from '@angular/core';\r\nimport { Provider } from '@angular/core';\r\nimport { Renderer2 } from '@angular/core';\r\nimport { RendererFactory2 } from '@angular/core';\r\nimport { RendererType2 } from '@angular/core';\r\nimport { Sanitizer } from '@angular/core';\r\nimport { SecurityContext } from '@angular/core';\r\nimport { StaticProvider } from '@angular/core';\r\nimport { Testability } from '@angular/core';\r\nimport { TestabilityRegistry } from '@angular/core';\r\nimport { Type } from '@angular/core';\r\nimport { Version } from '@angular/core';\r\nimport { XhrFactory } from '@angular/common';\r\nimport { ɵConsole } from '@angular/core';\r\nimport { ɵDomAdapter } from '@angular/common';\r\nimport { ɵgetDOM } from '@angular/common';\r\n\r\n/**\r\n * Exports required infrastructure for all Angular apps.\r\n * Included by default in all Angular apps created with the CLI\r\n * `new` command.\r\n * Re-exports `CommonModule` and `ApplicationModule`, making their\r\n * exports and providers available to all apps.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class BrowserModule {\r\n    constructor(parentModule: BrowserModule | null);\r\n    /**\r\n     * Configures a browser-based app to transition from a server-rendered app, if\r\n     * one is present on the page.\r\n     *\r\n     * @param params An object containing an identifier for the app to transition.\r\n     * The ID must match between the client and server versions of the app.\r\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\r\n     */\r\n    static withServerTransition(params: {\r\n        appId: string;\r\n    }): ModuleWithProviders<BrowserModule>;\r\n}\r\n\r\n/**\r\n * NgModule to install on the client side while using the `TransferState` to transfer state from\r\n * server to client.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class BrowserTransferStateModule {\r\n}\r\n\r\n/**\r\n * Predicates for use with {@link DebugElement}'s query functions.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class By {\r\n    /**\r\n     * Match all nodes.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\r\n     */\r\n    static all(): Predicate<DebugNode>;\r\n    /**\r\n     * Match elements by the given CSS selector.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\r\n     */\r\n    static css(selector: string): Predicate<DebugElement>;\r\n    /**\r\n     * Match nodes that have the given directive present.\r\n     *\r\n     * @usageNotes\r\n     * ### Example\r\n     *\r\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\r\n     */\r\n    static directive(type: Type<any>): Predicate<DebugNode>;\r\n}\r\n\r\n/**\r\n * Disables Angular tools.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function disableDebugTools(): void;\r\n\r\n/**\r\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\r\n * values to be safe to use in the different DOM contexts.\r\n *\r\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\r\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\r\n * the website.\r\n *\r\n * In specific situations, it might be necessary to disable sanitization, for example if the\r\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\r\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\r\n * methods, and then binding to that value from the template.\r\n *\r\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\r\n * Cross Site Scripting (XSS) security bug!\r\n *\r\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\r\n * close as possible to the source of the value, to make it easy to verify no security bug is\r\n * created by its use.\r\n *\r\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\r\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\r\n * code. The sanitizer leaves safe values intact.\r\n *\r\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\r\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\r\n * into this call. Make sure any user data is appropriately escaped for this security context.\r\n * For more detail, see the [Security Guide](https://g.co/ng/security).\r\n *\r\n * @publicApi\r\n */\r\nexport declare abstract class DomSanitizer implements Sanitizer {\r\n    /**\r\n     * Sanitizes a value for use in the given SecurityContext.\r\n     *\r\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\r\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\r\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\r\n     * is responsible to make sure that the value can definitely be safely used in the given context.\r\n     */\r\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\r\n    /**\r\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\r\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\r\n     * leave safe HTML intact, so in most situations this method should not be used.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\r\n    /**\r\n     * Bypass security and trust the given value to be safe style value (CSS).\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\r\n    /**\r\n     * Bypass security and trust the given value to be safe JavaScript.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\r\n    /**\r\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\r\n     * in hyperlinks or `<img src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\r\n    /**\r\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\r\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\r\n     *\r\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\r\n     * security risks!\r\n     */\r\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\r\n}\r\n\r\n/**\r\n * Enabled Angular debug tools that are accessible via your browser's\r\n * developer console.\r\n *\r\n * Usage:\r\n *\r\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\r\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\r\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\r\n *    then hit Enter.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\r\n\r\n/**\r\n * The injection token for the event-manager plug-in service.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<ɵangular_packages_platform_browser_platform_browser_g[]>;\r\n\r\n/**\r\n * An injectable service that provides event management for Angular\r\n * through a browser plug-in.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class EventManager {\r\n    private _zone;\r\n    private _plugins;\r\n    private _eventNameToPlugin;\r\n    /**\r\n     * Initializes an instance of the event-manager service.\r\n     */\r\n    constructor(plugins: ɵangular_packages_platform_browser_platform_browser_g[], _zone: NgZone);\r\n    /**\r\n     * Registers a handler for a specific element and event.\r\n     *\r\n     * @param element The HTML element to receive event notifications.\r\n     * @param eventName The name of the event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns  A callback function that can be used to remove the handler.\r\n     */\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    /**\r\n     * Registers a global handler for an event in a target view.\r\n     *\r\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\r\n     * @param eventName The name of the event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns A callback function that can be used to remove the handler.\r\n     * @deprecated No longer being used in Ivy code. To be removed in version 14.\r\n     */\r\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\r\n    /**\r\n     * Retrieves the compilation zone in which event listeners are registered.\r\n     */\r\n    getZone(): NgZone;\r\n}\r\n\r\n/**\r\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\r\n * @see `HammerGestureConfig`\r\n *\r\n * @ngModule HammerModule\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\r\n\r\n/**\r\n * Injection token used to provide a {@link HammerLoader} to Angular.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\r\n\r\n/**\r\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\r\n * for gesture recognition. Configures specific event recognition.\r\n * @publicApi\r\n */\r\nexport declare class HammerGestureConfig {\r\n    /**\r\n     * A set of supported event names for gestures to be used in Angular.\r\n     * Angular supports all built-in recognizers, as listed in\r\n     * [HammerJS documentation](https://hammerjs.github.io/).\r\n     */\r\n    events: string[];\r\n    /**\r\n     * Maps gesture event names to a set of configuration options\r\n     * that specify overrides to the default values for specific properties.\r\n     *\r\n     * The key is a supported event name to be configured,\r\n     * and the options object contains a set of properties, with override values\r\n     * to be applied to the named recognizer event.\r\n     * For example, to disable recognition of the rotate event, specify\r\n     *  `{\"rotate\": {\"enable\": false}}`.\r\n     *\r\n     * Properties that are not present take the HammerJS default values.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](https://hammerjs.github.io/).\r\n     *\r\n     */\r\n    overrides: {\r\n        [key: string]: Object;\r\n    };\r\n    /**\r\n     * Properties whose default values can be overridden for a given event.\r\n     * Different sets of properties apply to different events.\r\n     * For information about which properties are supported for which events,\r\n     * and their allowed and default values, see\r\n     * [HammerJS documentation](https://hammerjs.github.io/).\r\n     */\r\n    options?: {\r\n        cssProps?: any;\r\n        domEvents?: boolean;\r\n        enable?: boolean | ((manager: any) => boolean);\r\n        preset?: any[];\r\n        touchAction?: string;\r\n        recognizers?: any[];\r\n        inputClass?: any;\r\n        inputTarget?: EventTarget;\r\n    };\r\n    /**\r\n     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\r\n     * and attaches it to a given HTML element.\r\n     * @param element The element that will recognize gestures.\r\n     * @returns A HammerJS event-manager object.\r\n     */\r\n    buildHammer(element: HTMLElement): HammerInstance;\r\n}\r\n\r\ndeclare interface HammerInstance {\r\n    on(eventName: string, callback?: Function): void;\r\n    off(eventName: string, callback?: Function): void;\r\n    destroy?(): void;\r\n}\r\n\r\n/**\r\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\r\n *\r\n * @publicApi\r\n */\r\nexport declare type HammerLoader = () => Promise<void>;\r\n\r\n/**\r\n * Adds support for HammerJS.\r\n *\r\n * Import this module at the root of your application so that Angular can work with\r\n * HammerJS to detect gesture events.\r\n *\r\n * Note that applications still need to include the HammerJS script itself. This module\r\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class HammerModule {\r\n}\r\n\r\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\r\n\r\n/**\r\n * A service for managing HTML `<meta>` tags.\r\n *\r\n * Properties of the `MetaDefinition` object match the attributes of the\r\n * HTML `<meta>` tag. These tags define document metadata that is important for\r\n * things like configuring a Content Security Policy, defining browser compatibility\r\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\r\n * and Search Engine Optimization (SEO).\r\n *\r\n * To identify specific `<meta>` tags in a document, use an attribute selection\r\n * string in the format `\"tag_attribute='value string'\"`.\r\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\r\n * whose `name` attribute has the value `\"description\"`.\r\n * Selectors are used with the `querySelector()` Document method,\r\n * in the format `meta[{attrSelector}]`.\r\n *\r\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\r\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\r\n *\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Meta {\r\n    private _doc;\r\n    private _dom;\r\n    constructor(_doc: any);\r\n    /**\r\n     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\r\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\r\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\r\n     * If an existing element is found, it is returned and is not modified in any way.\r\n     * @param tag The definition of a `<meta>` element to match or create.\r\n     * @param forceCreation True to create a new element without checking whether one already exists.\r\n     * @returns The existing element with the same attributes and values if found,\r\n     * the new element if no match is found, or `null` if the tag parameter is not defined.\r\n     */\r\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\r\n    /**\r\n     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\r\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\r\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\r\n     * @param tags An array of tag definitions to match or create.\r\n     * @param forceCreation True to create new elements without checking whether they already exist.\r\n     * @returns The matching elements if found, or the new elements.\r\n     */\r\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\r\n    /**\r\n     * Retrieves a `<meta>` tag element in the current HTML document.\r\n     * @param attrSelector The tag attribute and value to match against, in the format\r\n     * `\"tag_attribute='value string'\"`.\r\n     * @returns The matching element, if any.\r\n     */\r\n    getTag(attrSelector: string): HTMLMetaElement | null;\r\n    /**\r\n     * Retrieves a set of `<meta>` tag elements in the current HTML document.\r\n     * @param attrSelector The tag attribute and value to match against, in the format\r\n     * `\"tag_attribute='value string'\"`.\r\n     * @returns The matching elements, if any.\r\n     */\r\n    getTags(attrSelector: string): HTMLMetaElement[];\r\n    /**\r\n     * Modifies an existing `<meta>` tag element in the current HTML document.\r\n     * @param tag The tag description with which to replace the existing tag content.\r\n     * @param selector A tag attribute and value to match against, to identify\r\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\r\n     * If not supplied, matches a tag with the same `name` or `property` attribute value as the\r\n     * replacement tag.\r\n     * @return The modified element.\r\n     */\r\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\r\n    /**\r\n     * Removes an existing `<meta>` tag element from the current HTML document.\r\n     * @param attrSelector A tag attribute and value to match against, to identify\r\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\r\n     */\r\n    removeTag(attrSelector: string): void;\r\n    /**\r\n     * Removes an existing `<meta>` tag element from the current HTML document.\r\n     * @param meta The tag definition to match against to identify an existing tag.\r\n     */\r\n    removeTagElement(meta: HTMLMetaElement): void;\r\n    private _getOrCreateElement;\r\n    private _setMetaElementAttributes;\r\n    private _parseSelector;\r\n    private _containsAttributes;\r\n    private _getMetaKeyMap;\r\n}\r\n\r\n\r\n/**\r\n * Represents the attributes of an HTML `<meta>` element. The element itself is\r\n * represented by the internal `HTMLMetaElement`.\r\n *\r\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\r\n * @see `Meta`\r\n *\r\n * @publicApi\r\n */\r\nexport declare type MetaDefinition = {\r\n    charset?: string;\r\n    content?: string;\r\n    httpEquiv?: string;\r\n    id?: string;\r\n    itemprop?: string;\r\n    name?: string;\r\n    property?: string;\r\n    scheme?: string;\r\n    url?: string;\r\n} & {\r\n    [prop: string]: string;\r\n};\r\n\r\n/**\r\n * A factory function that returns a `PlatformRef` instance associated with browser service\r\n * providers.\r\n *\r\n * @publicApi\r\n */\r\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as HTML.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeHtml extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL to load executable code from.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeResourceUrl extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as JavaScript.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeScript extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as style (CSS).\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeStyle extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL linking to a document.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeUrl extends SafeValue {\r\n}\r\n\r\n/**\r\n * Marker interface for a value that's safe to use in a particular context.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface SafeValue {\r\n}\r\n\r\n/**\r\n * A type-safe key to use with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nexport declare type StateKey<T> = string & {\r\n    __not_a_string: never;\r\n};\r\n\r\n/**\r\n * A service that can be used to get and set the title of a current HTML document.\r\n *\r\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\r\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\r\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\r\n * title value.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class Title {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    /**\r\n     * Get the title of the current HTML document.\r\n     */\r\n    getTitle(): string;\r\n    /**\r\n     * Set the title of the current HTML document.\r\n     * @param newTitle\r\n     */\r\n    setTitle(newTitle: string): void;\r\n}\r\n\r\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * `TransferState` will be available as an injectable token. To use it import\r\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\r\n * non-lossy manner.\r\n *\r\n * @publicApi\r\n */\r\nexport declare class TransferState {\r\n    private store;\r\n    private onSerializeCallbacks;\r\n    /**\r\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n     */\r\n    get<T>(key: StateKey<T>, defaultValue: T): T;\r\n    /**\r\n     * Set the value corresponding to a key.\r\n     */\r\n    set<T>(key: StateKey<T>, value: T): void;\r\n    /**\r\n     * Remove a key from the store.\r\n     */\r\n    remove<T>(key: StateKey<T>): void;\r\n    /**\r\n     * Test whether a key exists in the store.\r\n     */\r\n    hasKey<T>(key: StateKey<T>): boolean;\r\n    /**\r\n     * Register a callback to provide the value for a key when `toJson` is called.\r\n     */\r\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\r\n    /**\r\n     * Serialize the current state of the store to JSON.\r\n     */\r\n    toJson(): string;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const VERSION: Version;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_a(): ErrorHandler;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_b(): any;\r\n\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_c: StaticProvider[];\r\n\r\n/**\r\n * Factory to create a `Meta` service instance for the current DOM document.\r\n */\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_d(): Meta;\r\n\r\n\r\n/**\r\n * Factory to create Title service.\r\n */\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_e(): Title;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_f(doc: Document, appId: string): TransferState;\r\n\r\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_g {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    manager: EventManager;\r\n    abstract supports(eventName: string): boolean;\r\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\r\n}\r\n\r\n/**\r\n * In View Engine, support for Hammer gestures is built-in by default.\r\n */\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_h: Provider[];\r\n\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_i: Provider[];\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_j(injector: Injector): ɵDomSanitizerImpl;\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_k(transitionId: string, document: any, injector: Injector): () => void;\r\n\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_l: StaticProvider[];\r\n\r\nexport declare function ɵangular_packages_platform_browser_platform_browser_m(coreTokens: NgProbeToken[]): any;\r\n\r\n/**\r\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\r\n */\r\nexport declare const ɵangular_packages_platform_browser_platform_browser_n: Provider[];\r\n\r\n/**\r\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\r\n */\r\nexport declare class ɵangular_packages_platform_browser_platform_browser_o implements XhrFactory {\r\n    build(): XMLHttpRequest;\r\n}\r\n\r\n/**\r\n * Provides DOM operations in any browser environment.\r\n *\r\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_p extends ɵDomAdapter {\r\n    readonly supportsDOMEvents: boolean;\r\n}\r\n\r\n/**\r\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).\r\n * @publicApi\r\n */\r\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\r\n\r\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__: never[];\r\n\r\n/**\r\n * A `DomAdapter` powered by full browser DOM APIs.\r\n *\r\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nexport declare class ɵBrowserDomAdapter extends ɵangular_packages_platform_browser_platform_browser_p {\r\n    static makeCurrent(): void;\r\n    onAndCancel(el: Node, evt: any, listener: any): Function;\r\n    dispatchEvent(el: Node, evt: any): void;\r\n    remove(node: Node): void;\r\n    createElement(tagName: string, doc?: Document): HTMLElement;\r\n    createHtmlDocument(): HTMLDocument;\r\n    getDefaultDocument(): Document;\r\n    isElementNode(node: Node): boolean;\r\n    isShadowRoot(node: any): boolean;\r\n    /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\r\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\r\n    getBaseHref(doc: Document): string | null;\r\n    resetBaseElement(): void;\r\n    getUserAgent(): string;\r\n    getCookie(name: string): string | null;\r\n}\r\n\r\nexport declare class ɵBrowserGetTestability implements GetTestability {\r\n    static init(): void;\r\n    addToWindow(registry: TestabilityRegistry): void;\r\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\r\n}\r\n\r\nexport declare class ɵDomEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    constructor(doc: any);\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    removeEventListener(target: any, eventName: string, callback: Function): void;\r\n}\r\n\r\nexport declare class ɵDomRendererFactory2 implements RendererFactory2 {\r\n    private eventManager;\r\n    private sharedStylesHost;\r\n    private appId;\r\n    private rendererByCompId;\r\n    private defaultRenderer;\r\n    constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost, appId: string);\r\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\r\n    begin(): void;\r\n    end(): void;\r\n}\r\n\r\nexport declare class ɵDomSanitizerImpl extends DomSanitizer {\r\n    private _doc;\r\n    constructor(_doc: any);\r\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\r\n    bypassSecurityTrustHtml(value: string): SafeHtml;\r\n    bypassSecurityTrustStyle(value: string): SafeStyle;\r\n    bypassSecurityTrustScript(value: string): SafeScript;\r\n    bypassSecurityTrustUrl(value: string): SafeUrl;\r\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\r\n}\r\n\r\nexport declare class ɵDomSharedStylesHost extends ɵSharedStylesHost implements OnDestroy {\r\n    private _doc;\r\n    private _hostNodes;\r\n    constructor(_doc: any);\r\n    private _addStylesToHost;\r\n    addHost(hostNode: Node): void;\r\n    removeHost(hostNode: Node): void;\r\n    onStylesAdded(additions: Set<string>): void;\r\n    ngOnDestroy(): void;\r\n}\r\n\r\nexport declare const ɵELEMENT_PROBE_PROVIDERS: Provider[];\r\n\r\n/**\r\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\r\n * with more robust functionality.\r\n *\r\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\r\n * tree-shaking properly.\r\n */\r\nexport declare const ɵELEMENT_PROBE_PROVIDERS__POST_R3__: never[];\r\n\r\n\r\nexport declare function ɵescapeHtml(text: string): string;\r\n\r\nexport declare function ɵflattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\r\n\r\nexport { ɵgetDOM }\r\n\r\n/**\r\n * In Ivy, support for Hammer gestures is optional, so applications must\r\n * import the `HammerModule` at root to turn on support. This means that\r\n * Hammer-specific code can be tree-shaken away if not needed.\r\n */\r\nexport declare const ɵHAMMER_PROVIDERS__POST_R3__: never[];\r\n\r\n/**\r\n * Event plugin that adds Hammer support to an application.\r\n *\r\n * @ngModule HammerModule\r\n */\r\nexport declare class ɵHammerGesturesPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    private _config;\r\n    private console;\r\n    private loader?;\r\n    private _loaderPromise;\r\n    constructor(doc: any, _config: HammerGestureConfig, console: ɵConsole, loader?: HammerLoader | null | undefined);\r\n    supports(eventName: string): boolean;\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    isCustomEvent(eventName: string): boolean;\r\n}\r\n\r\nexport declare function ɵinitDomAdapter(): void;\r\n\r\nexport declare const ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\r\n\r\n/**\r\n * @publicApi\r\n * A browser plug-in that provides support for handling of key events in Angular.\r\n */\r\nexport declare class ɵKeyEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\r\n    /**\r\n     * Initializes an instance of the browser plug-in.\r\n     * @param doc The document in which key events will be detected.\r\n     */\r\n    constructor(doc: any);\r\n    /**\r\n     * Reports whether a named key event is supported.\r\n     * @param eventName The event name to query.\r\n     * @return True if the named key event is supported.\r\n     */\r\n    supports(eventName: string): boolean;\r\n    /**\r\n     * Registers a handler for a specific element and key event.\r\n     * @param element The HTML element to receive event notifications.\r\n     * @param eventName The name of the key event to listen for.\r\n     * @param handler A function to call when the notification occurs. Receives the\r\n     * event object as an argument.\r\n     * @returns The key event that was registered.\r\n     */\r\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\r\n    static parseEventName(eventName: string): {\r\n        fullKey: string;\r\n        domEventName: string;\r\n    } | null;\r\n    static getEventFullKey(event: KeyboardEvent): string;\r\n    /**\r\n     * Configures a handler callback for a key event.\r\n     * @param fullKey The event name that combines all simultaneous keystrokes.\r\n     * @param handler The function that responds to the key event.\r\n     * @param zone The zone in which the event occurred.\r\n     * @returns A callback function.\r\n     */\r\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\r\n}\r\n\r\nexport declare const ɵNAMESPACE_URIS: {\r\n    [ns: string]: string;\r\n};\r\n\r\nexport declare class ɵSharedStylesHost {\r\n    addStyles(styles: string[]): void;\r\n    onStylesAdded(additions: Set<string>): void;\r\n    getAllStyles(): string[];\r\n}\r\n\r\nexport declare function ɵshimContentAttribute(componentShortId: string): string;\r\n\r\nexport declare function ɵshimHostAttribute(componentShortId: string): string;\r\n\r\n/**\r\n * An id that identifies a particular application being bootstrapped, that should\r\n * match across the client/server boundary.\r\n */\r\nexport declare const ɵTRANSITION_ID: InjectionToken<unknown>;\r\n\r\nexport { }\r\n"]}
=======
{"version":3,"file":"platform-browser.d.ts","sources":["platform-browser.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v12.2.10\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ComponentRef } from '@angular/core';\nimport { DebugElement } from '@angular/core';\nimport { DebugNode } from '@angular/core';\nimport { ErrorHandler } from '@angular/core';\nimport { GetTestability } from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { ModuleWithProviders } from '@angular/core';\nimport { NgProbeToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { PlatformRef } from '@angular/core';\nimport { Predicate } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { RendererFactory2 } from '@angular/core';\nimport { RendererType2 } from '@angular/core';\nimport { Sanitizer } from '@angular/core';\nimport { SecurityContext } from '@angular/core';\nimport { StaticProvider } from '@angular/core';\nimport { Testability } from '@angular/core';\nimport { TestabilityRegistry } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { Version } from '@angular/core';\nimport { XhrFactory } from '@angular/common';\nimport { ɵConsole } from '@angular/core';\nimport { ɵDomAdapter } from '@angular/common';\nimport { ɵgetDOM } from '@angular/common';\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nexport declare class BrowserModule {\n    constructor(parentModule: BrowserModule | null);\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params: {\n        appId: string;\n    }): ModuleWithProviders<BrowserModule>;\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\nexport declare class BrowserTransferStateModule {\n}\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport declare class By {\n    /**\n     * Match all nodes.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    static all(): Predicate<DebugNode>;\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    static css(selector: string): Predicate<DebugElement>;\n    /**\n     * Match nodes that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    static directive(type: Type<any>): Predicate<DebugNode>;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport declare function disableDebugTools(): void;\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nexport declare abstract class DomSanitizer implements Sanitizer {\n    /**\n     * Sanitizes a value for use in the given SecurityContext.\n     *\n     * If value is trusted for the context, this method will unwrap the contained safe value and use\n     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n     * is responsible to make sure that the value can definitely be safely used in the given context.\n     */\n    abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n    /**\n     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n     * leave safe HTML intact, so in most situations this method should not be used.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n    /**\n     * Bypass security and trust the given value to be safe style value (CSS).\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n    /**\n     * Bypass security and trust the given value to be safe JavaScript.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustScript(value: string): SafeScript;\n    /**\n     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n     * in hyperlinks or `<img src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n    /**\n     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n     * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n     *\n     * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n     * security risks!\n     */\n    abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<ɵangular_packages_platform_browser_platform_browser_g[]>;\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nexport declare class EventManager {\n    private _zone;\n    private _plugins;\n    private _eventNameToPlugin;\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins: ɵangular_packages_platform_browser_platform_browser_g[], _zone: NgZone);\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     * @deprecated No longer being used in Ivy code. To be removed in version 14.\n     */\n    addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone(): NgZone;\n}\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nexport declare class HammerGestureConfig {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    events: string[];\n    /**\n     * Maps gesture event names to a set of configuration options\n     * that specify overrides to the default values for specific properties.\n     *\n     * The key is a supported event name to be configured,\n     * and the options object contains a set of properties, with override values\n     * to be applied to the named recognizer event.\n     * For example, to disable recognition of the rotate event, specify\n     *  `{\"rotate\": {\"enable\": false}}`.\n     *\n     * Properties that are not present take the HammerJS default values.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     *\n     */\n    overrides: {\n        [key: string]: Object;\n    };\n    /**\n     * Properties whose default values can be overridden for a given event.\n     * Different sets of properties apply to different events.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    options?: {\n        cssProps?: any;\n        domEvents?: boolean;\n        enable?: boolean | ((manager: any) => boolean);\n        preset?: any[];\n        touchAction?: string;\n        recognizers?: any[];\n        inputClass?: any;\n        inputTarget?: EventTarget;\n    };\n    /**\n     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element: HTMLElement): HammerInstance;\n}\n\ndeclare interface HammerInstance {\n    on(eventName: string, callback?: Function): void;\n    off(eventName: string, callback?: Function): void;\n    destroy?(): void;\n}\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport declare type HammerLoader = () => Promise<void>;\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\nexport declare class HammerModule {\n}\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\nexport declare class Meta {\n    private _doc;\n    private _dom;\n    constructor(_doc: any);\n    /**\n     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * If an existing element is found, it is returned and is not modified in any way.\n     * @param tag The definition of a `<meta>` element to match or create.\n     * @param forceCreation True to create a new element without checking whether one already exists.\n     * @returns The existing element with the same attributes and values if found,\n     * the new element if no match is found, or `null` if the tag parameter is not defined.\n     */\n    addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\n    /**\n     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * @param tags An array of tag definitions to match or create.\n     * @param forceCreation True to create new elements without checking whether they already exist.\n     * @returns The matching elements if found, or the new elements.\n     */\n    addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\n    /**\n     * Retrieves a `<meta>` tag element in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching element, if any.\n     */\n    getTag(attrSelector: string): HTMLMetaElement | null;\n    /**\n     * Retrieves a set of `<meta>` tag elements in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching elements, if any.\n     */\n    getTags(attrSelector: string): HTMLMetaElement[];\n    /**\n     * Modifies an existing `<meta>` tag element in the current HTML document.\n     * @param tag The tag description with which to replace the existing tag content.\n     * @param selector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n     * replacement tag.\n     * @return The modified element.\n     */\n    updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param attrSelector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     */\n    removeTag(attrSelector: string): void;\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param meta The tag definition to match against to identify an existing tag.\n     */\n    removeTagElement(meta: HTMLMetaElement): void;\n    private _getOrCreateElement;\n    private _setMetaElementAttributes;\n    private _parseSelector;\n    private _containsAttributes;\n    private _getMetaKeyMap;\n}\n\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see `Meta`\n *\n * @publicApi\n */\nexport declare type MetaDefinition = {\n    charset?: string;\n    content?: string;\n    httpEquiv?: string;\n    id?: string;\n    itemprop?: string;\n    name?: string;\n    property?: string;\n    scheme?: string;\n    url?: string;\n} & {\n    [prop: string]: string;\n};\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport declare interface SafeHtml extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport declare interface SafeResourceUrl extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport declare interface SafeScript extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport declare interface SafeStyle extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport declare interface SafeUrl extends SafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport declare interface SafeValue {\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport declare type StateKey<T> = string & {\n    __not_a_string: never;\n};\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nexport declare class Title {\n    private _doc;\n    constructor(_doc: any);\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle(): string;\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle: string): void;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\nexport declare class TransferState {\n    private store;\n    private onSerializeCallbacks;\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get<T>(key: StateKey<T>, defaultValue: T): T;\n    /**\n     * Set the value corresponding to a key.\n     */\n    set<T>(key: StateKey<T>, value: T): void;\n    /**\n     * Remove a key from the store.\n     */\n    remove<T>(key: StateKey<T>): void;\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey<T>(key: StateKey<T>): boolean;\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson(): string;\n}\n\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_a(): ErrorHandler;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_b(): any;\n\nexport declare const ɵangular_packages_platform_browser_platform_browser_c: StaticProvider[];\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport declare function ɵangular_packages_platform_browser_platform_browser_d(): Meta;\n\n\n/**\n * Factory to create Title service.\n */\nexport declare function ɵangular_packages_platform_browser_platform_browser_e(): Title;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_f(doc: Document, appId: string): TransferState;\n\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_g {\n    private _doc;\n    constructor(_doc: any);\n    manager: EventManager;\n    abstract supports(eventName: string): boolean;\n    abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\n}\n\n/**\n * In View Engine, support for Hammer gestures is built-in by default.\n */\nexport declare const ɵangular_packages_platform_browser_platform_browser_h: Provider[];\n\nexport declare const ɵangular_packages_platform_browser_platform_browser_i: Provider[];\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_j(injector: Injector): ɵDomSanitizerImpl;\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_k(transitionId: string, document: any, injector: Injector): () => void;\n\nexport declare const ɵangular_packages_platform_browser_platform_browser_l: StaticProvider[];\n\nexport declare function ɵangular_packages_platform_browser_platform_browser_m(coreTokens: NgProbeToken[]): any;\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport declare const ɵangular_packages_platform_browser_platform_browser_n: Provider[];\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\nexport declare class ɵangular_packages_platform_browser_platform_browser_o implements XhrFactory {\n    build(): XMLHttpRequest;\n}\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare abstract class ɵangular_packages_platform_browser_platform_browser_p extends ɵDomAdapter {\n    readonly supportsDOMEvents: boolean;\n}\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](https://g.co/ng/security).\n * @publicApi\n */\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS: StaticProvider[];\n\nexport declare const ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__: never[];\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport declare class ɵBrowserDomAdapter extends ɵangular_packages_platform_browser_platform_browser_p {\n    static makeCurrent(): void;\n    onAndCancel(el: Node, evt: any, listener: any): Function;\n    dispatchEvent(el: Node, evt: any): void;\n    remove(node: Node): void;\n    createElement(tagName: string, doc?: Document): HTMLElement;\n    createHtmlDocument(): HTMLDocument;\n    getDefaultDocument(): Document;\n    isElementNode(node: Node): boolean;\n    isShadowRoot(node: any): boolean;\n    /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n    getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n    getBaseHref(doc: Document): string | null;\n    resetBaseElement(): void;\n    getUserAgent(): string;\n    getCookie(name: string): string | null;\n}\n\nexport declare class ɵBrowserGetTestability implements GetTestability {\n    static init(): void;\n    addToWindow(registry: TestabilityRegistry): void;\n    findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n\nexport declare class ɵDomEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    constructor(doc: any);\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    removeEventListener(target: any, eventName: string, callback: Function): void;\n}\n\nexport declare class ɵDomRendererFactory2 implements RendererFactory2 {\n    private eventManager;\n    private sharedStylesHost;\n    private appId;\n    private rendererByCompId;\n    private defaultRenderer;\n    constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost, appId: string);\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\n    begin(): void;\n    end(): void;\n}\n\nexport declare class ɵDomSanitizerImpl extends DomSanitizer {\n    private _doc;\n    constructor(_doc: any);\n    sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\n    bypassSecurityTrustHtml(value: string): SafeHtml;\n    bypassSecurityTrustStyle(value: string): SafeStyle;\n    bypassSecurityTrustScript(value: string): SafeScript;\n    bypassSecurityTrustUrl(value: string): SafeUrl;\n    bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport declare class ɵDomSharedStylesHost extends ɵSharedStylesHost implements OnDestroy {\n    private _doc;\n    private _hostNodes;\n    constructor(_doc: any);\n    private _addStylesToHost;\n    addHost(hostNode: Node): void;\n    removeHost(hostNode: Node): void;\n    onStylesAdded(additions: Set<string>): void;\n    ngOnDestroy(): void;\n}\n\nexport declare const ɵELEMENT_PROBE_PROVIDERS: Provider[];\n\n/**\n * In Ivy, we don't support NgProbe because we have our own set of testing utilities\n * with more robust functionality.\n *\n * We shouldn't bring in NgProbe because it prevents DebugNode and friends from\n * tree-shaking properly.\n */\nexport declare const ɵELEMENT_PROBE_PROVIDERS__POST_R3__: never[];\n\n\nexport declare function ɵescapeHtml(text: string): string;\n\nexport declare function ɵflattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\n\nexport { ɵgetDOM }\n\n/**\n * In Ivy, support for Hammer gestures is optional, so applications must\n * import the `HammerModule` at root to turn on support. This means that\n * Hammer-specific code can be tree-shaken away if not needed.\n */\nexport declare const ɵHAMMER_PROVIDERS__POST_R3__: never[];\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\nexport declare class ɵHammerGesturesPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    private _config;\n    private console;\n    private loader?;\n    private _loaderPromise;\n    constructor(doc: any, _config: HammerGestureConfig, console: ɵConsole, loader?: HammerLoader | null | undefined);\n    supports(eventName: string): boolean;\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    isCustomEvent(eventName: string): boolean;\n}\n\nexport declare function ɵinitDomAdapter(): void;\n\nexport declare const ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nexport declare class ɵKeyEventsPlugin extends ɵangular_packages_platform_browser_platform_browser_g {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc: any);\n    /**\n     * Reports whether a named key event is supported.\n     * @param eventName The event name to query.\n     * @return True if the named key event is supported.\n     */\n    supports(eventName: string): boolean;\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n     */\n    addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n    static parseEventName(eventName: string): {\n        fullKey: string;\n        domEventName: string;\n    } | null;\n    static getEventFullKey(event: KeyboardEvent): string;\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function;\n}\n\nexport declare const ɵNAMESPACE_URIS: {\n    [ns: string]: string;\n};\n\nexport declare class ɵSharedStylesHost {\n    addStyles(styles: string[]): void;\n    onStylesAdded(additions: Set<string>): void;\n    getAllStyles(): string[];\n}\n\nexport declare function ɵshimContentAttribute(componentShortId: string): string;\n\nexport declare function ɵshimHostAttribute(componentShortId: string): string;\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport declare const ɵTRANSITION_ID: InjectionToken<unknown>;\n\nexport { }\n"]}
>>>>>>> c5d4ca514d61d844d3a657bc982015321bfa338d
